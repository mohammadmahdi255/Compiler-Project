
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftERRORrightASSIGNleftIDENTIFIERleftREAL_KWleftINTEGER_KWleftELSE_KWleftTHEN_KWleftIF_KWleftOR_KWleftAND_KWleftNOT_KWleftGTLTNEEQLEGEleftSUMSUBleftMULDIVDIV_KWMOD_KWleftLRBRRBAND_KW ASSIGN BEGIN_KW COLON COMMA DIV DIV_KW DOT DO_KW ELSE_KW END_KW EQ ERROR FUNCTION_KW GE GT IDENTIFIER IF_KW INTEGER_CONSTANT INTEGER_KW LE LRB LT MOD_KW MUL NE NOT_KW OR_KW PROCEDURE_KW PROGRAM_KW REAL_CONSTANT REAL_KW RRB SEMICOLON SUB SUM THEN_KW VAR_KW WHILE_KWprogram : PROGRAM_KW IDENTIFIER declarations procedure_list compound_statement DOTdeclarations : VAR_KW declaration_list SEMICOLON\n                        | emptydeclaration_list : identifier_list  COLON type\n               | declaration_list COLON identifier_list  COLON typeidentifier_list : IDENTIFIER\n                | identifier_list COMMA IDENTIFIERtype : INTEGER_KW\n                | REAL_KWprocedure_list : procedure_list procedure\n                          | procedure_list function\n                          | emptyprocedure : PROCEDURE_KW IDENTIFIER parameters COLON declarations compound_statement SEMICOLONfunction : FUNCTION_KW IDENTIFIER parameters COLON type SEMICOLON declarations compound_statement SEMICOLONparameters : LRB declaration_list RRB\n                    | emptycompound_statement : BEGIN_KW statement_list END_KWstatement_list : statement\n                          | statement_list COLON statementstatement : IDENTIFIER ASSIGN expression\n                     | IF_KW expression THEN_KW statement ELSE_KW statement\n                     | IF_KW expression THEN_KW statement\n                     | WHILE_KW expression DO_KW statement\n                     | compound_statement\n                     | IDENTIFIER arguments\n                     | emptyarguments : LRB actual_parameter_list RRBactual_parameter_list : actual_parameter_list COMMA actual_parameter\n                                 | actual_parameteractual_parameter : expression\n                            | IDENTIFIERexpression : INTEGER_CONSTANT\n                      | REAL_CONSTANT\n                      | IDENTIFIER\n                      | expression SUM expression\n                      | expression SUB expression\n                      | expression MUL expression\n                      | expression DIV expression\n                      | SUB expression\n                      | expression DIV_KW expression\n                      | expression MOD_KW expression\n                      | expression LT expression\n                      | expression LE expression\n                      | expression EQ expression\n                      | expression NE expression\n                      | expression GT expression\n                      | expression GE expression\n                      | expression AND_KW expression\n                      | expression OR_KW expression\n                      | NOT_KW expression\n                      | LRB expression RRB\n                      empty :'
    
_lr_action_items = {'PROGRAM_KW':([0,],[2,]),'$end':([1,22,],[0,-1,]),'IDENTIFIER':([2,5,15,16,17,19,21,26,27,38,39,41,46,47,48,51,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,79,85,107,],[3,11,25,30,31,11,36,45,45,25,45,60,45,45,45,11,25,45,45,45,45,45,45,45,45,45,45,45,45,45,45,25,60,25,]),'VAR_KW':([3,80,109,],[5,5,5,]),'BEGIN_KW':([3,4,6,7,8,13,14,15,18,38,61,79,80,103,107,109,111,112,114,],[-52,-52,-3,15,-12,-10,-11,15,-2,15,15,15,-52,15,15,-52,-13,15,-14,]),'PROCEDURE_KW':([3,4,6,7,8,13,14,18,111,114,],[-52,-52,-3,16,-12,-10,-11,-2,-13,-14,]),'FUNCTION_KW':([3,4,6,7,8,13,14,18,111,114,],[-52,-52,-3,17,-12,-10,-11,-2,-13,-14,]),'SEMICOLON':([9,33,34,35,37,83,105,108,113,],[18,-4,-8,-9,-17,-5,109,111,114,]),'COLON':([9,10,11,15,23,24,28,29,30,31,32,33,34,35,36,37,38,40,43,44,45,50,52,53,55,56,61,76,77,79,81,83,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,107,110,],[19,20,-6,-52,38,-18,-24,-26,-52,-52,54,-4,-8,-9,-7,-17,-52,-25,-32,-33,-34,80,-16,82,-19,-20,-52,-39,-50,-52,19,-5,-27,-22,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,-23,-15,-52,-21,]),'COMMA':([10,11,32,36,43,44,45,57,58,59,60,76,77,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,106,],[21,-6,21,-7,-32,-33,-34,85,-29,-30,-31,-39,-50,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,-28,]),'DOT':([12,37,],[22,-17,]),'IF_KW':([15,38,61,79,107,],[26,26,26,26,26,]),'WHILE_KW':([15,38,61,79,107,],[27,27,27,27,27,]),'END_KW':([15,23,24,28,29,37,38,40,43,44,45,55,56,61,76,77,79,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,107,110,],[-52,37,-18,-24,-26,-17,-52,-25,-32,-33,-34,-19,-20,-52,-39,-50,-52,-27,-22,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,-23,-52,-21,]),'INTEGER_KW':([20,54,82,],[34,34,34,]),'REAL_KW':([20,54,82,],[35,35,35,]),'ASSIGN':([25,],[39,]),'LRB':([25,26,27,30,31,39,41,46,47,48,62,63,64,65,66,67,68,69,70,71,72,73,74,75,85,],[41,48,48,51,51,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'INTEGER_CONSTANT':([26,27,39,41,46,47,48,62,63,64,65,66,67,68,69,70,71,72,73,74,75,85,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'REAL_CONSTANT':([26,27,39,41,46,47,48,62,63,64,65,66,67,68,69,70,71,72,73,74,75,85,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'SUB':([26,27,39,41,42,43,44,45,46,47,48,49,56,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,],[46,46,46,46,63,-32,-33,-34,46,46,46,63,63,63,-34,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-39,63,63,46,-35,-36,-37,-38,-40,-41,63,63,63,63,63,63,63,63,-51,]),'NOT_KW':([26,27,39,41,46,47,48,62,63,64,65,66,67,68,69,70,71,72,73,74,75,85,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'ELSE_KW':([28,29,37,40,43,44,45,56,61,76,77,79,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,107,110,],[-24,-26,-17,-25,-32,-33,-34,-20,-52,-39,-50,-52,-27,-22,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,-23,-52,-21,]),'RRB':([33,34,35,43,44,45,57,58,59,60,76,77,78,81,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,106,],[-4,-8,-9,-32,-33,-34,84,-29,-30,-31,-39,-50,101,104,-5,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,-28,]),'THEN_KW':([42,43,44,45,76,77,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,],[61,-32,-33,-34,-39,-50,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,]),'SUM':([42,43,44,45,49,56,59,60,76,77,78,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,],[62,-32,-33,-34,62,62,62,-34,-39,62,62,-35,-36,-37,-38,-40,-41,62,62,62,62,62,62,62,62,-51,]),'MUL':([42,43,44,45,49,56,59,60,76,77,78,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,],[64,-32,-33,-34,64,64,64,-34,64,64,64,64,64,-37,-38,-40,-41,64,64,64,64,64,64,64,64,-51,]),'DIV':([42,43,44,45,49,56,59,60,76,77,78,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,],[65,-32,-33,-34,65,65,65,-34,65,65,65,65,65,-37,-38,-40,-41,65,65,65,65,65,65,65,65,-51,]),'DIV_KW':([42,43,44,45,49,56,59,60,76,77,78,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,],[66,-32,-33,-34,66,66,66,-34,66,66,66,66,66,-37,-38,-40,-41,66,66,66,66,66,66,66,66,-51,]),'MOD_KW':([42,43,44,45,49,56,59,60,76,77,78,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,],[67,-32,-33,-34,67,67,67,-34,67,67,67,67,67,-37,-38,-40,-41,67,67,67,67,67,67,67,67,-51,]),'LT':([42,43,44,45,49,56,59,60,76,77,78,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,],[68,-32,-33,-34,68,68,68,-34,-39,68,68,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,68,68,-51,]),'LE':([42,43,44,45,49,56,59,60,76,77,78,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,],[69,-32,-33,-34,69,69,69,-34,-39,69,69,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,69,69,-51,]),'EQ':([42,43,44,45,49,56,59,60,76,77,78,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,],[70,-32,-33,-34,70,70,70,-34,-39,70,70,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,70,70,-51,]),'NE':([42,43,44,45,49,56,59,60,76,77,78,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,],[71,-32,-33,-34,71,71,71,-34,-39,71,71,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,71,71,-51,]),'GT':([42,43,44,45,49,56,59,60,76,77,78,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,],[72,-32,-33,-34,72,72,72,-34,-39,72,72,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,72,72,-51,]),'GE':([42,43,44,45,49,56,59,60,76,77,78,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,],[73,-32,-33,-34,73,73,73,-34,-39,73,73,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,73,73,-51,]),'AND_KW':([42,43,44,45,49,56,59,60,76,77,78,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,],[74,-32,-33,-34,74,74,74,-34,-39,-50,74,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,-48,74,-51,]),'OR_KW':([42,43,44,45,49,56,59,60,76,77,78,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,],[75,-32,-33,-34,75,75,75,-34,-39,-50,75,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,]),'DO_KW':([43,44,45,49,76,77,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,],[-32,-33,-34,79,-39,-50,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([3,80,109,],[4,103,112,]),'empty':([3,4,15,30,31,38,61,79,80,107,109,],[6,8,29,52,52,29,29,29,6,29,6,]),'procedure_list':([4,],[7,]),'declaration_list':([5,51,],[9,81,]),'identifier_list':([5,19,51,],[10,32,10,]),'compound_statement':([7,15,38,61,79,103,107,112,],[12,28,28,28,28,108,28,113,]),'procedure':([7,],[13,]),'function':([7,],[14,]),'statement_list':([15,],[23,]),'statement':([15,38,61,79,107,],[24,55,86,102,110,]),'type':([20,54,82,],[33,83,105,]),'arguments':([25,],[40,]),'expression':([26,27,39,41,46,47,48,62,63,64,65,66,67,68,69,70,71,72,73,74,75,85,],[42,49,56,59,76,77,78,87,88,89,90,91,92,93,94,95,96,97,98,99,100,59,]),'parameters':([30,31,],[50,53,]),'actual_parameter_list':([41,],[57,]),'actual_parameter':([41,85,],[58,106,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM_KW IDENTIFIER declarations procedure_list compound_statement DOT','program',6,'p_program','Parser.py',38),
  ('declarations -> VAR_KW declaration_list SEMICOLON','declarations',3,'p_declarations','Parser.py',43),
  ('declarations -> empty','declarations',1,'p_declarations','Parser.py',44),
  ('declaration_list -> identifier_list COLON type','declaration_list',3,'p_declaration_list','Parser.py',49),
  ('declaration_list -> declaration_list COLON identifier_list COLON type','declaration_list',5,'p_declaration_list','Parser.py',50),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list','Parser.py',56),
  ('identifier_list -> identifier_list COMMA IDENTIFIER','identifier_list',3,'p_identifier_list','Parser.py',57),
  ('type -> INTEGER_KW','type',1,'p_type','Parser.py',63),
  ('type -> REAL_KW','type',1,'p_type','Parser.py',64),
  ('procedure_list -> procedure_list procedure','procedure_list',2,'p_procedure_list','Parser.py',69),
  ('procedure_list -> procedure_list function','procedure_list',2,'p_procedure_list','Parser.py',70),
  ('procedure_list -> empty','procedure_list',1,'p_procedure_list','Parser.py',71),
  ('procedure -> PROCEDURE_KW IDENTIFIER parameters COLON declarations compound_statement SEMICOLON','procedure',7,'p_procedure','Parser.py',76),
  ('function -> FUNCTION_KW IDENTIFIER parameters COLON type SEMICOLON declarations compound_statement SEMICOLON','function',9,'p_function','Parser.py',81),
  ('parameters -> LRB declaration_list RRB','parameters',3,'p_parameters','Parser.py',86),
  ('parameters -> empty','parameters',1,'p_parameters','Parser.py',87),
  ('compound_statement -> BEGIN_KW statement_list END_KW','compound_statement',3,'p_compound_statement','Parser.py',92),
  ('statement_list -> statement','statement_list',1,'p_statement_list','Parser.py',97),
  ('statement_list -> statement_list COLON statement','statement_list',3,'p_statement_list','Parser.py',98),
  ('statement -> IDENTIFIER ASSIGN expression','statement',3,'p_statement','Parser.py',103),
  ('statement -> IF_KW expression THEN_KW statement ELSE_KW statement','statement',6,'p_statement','Parser.py',104),
  ('statement -> IF_KW expression THEN_KW statement','statement',4,'p_statement','Parser.py',105),
  ('statement -> WHILE_KW expression DO_KW statement','statement',4,'p_statement','Parser.py',106),
  ('statement -> compound_statement','statement',1,'p_statement','Parser.py',107),
  ('statement -> IDENTIFIER arguments','statement',2,'p_statement','Parser.py',108),
  ('statement -> empty','statement',1,'p_statement','Parser.py',109),
  ('arguments -> LRB actual_parameter_list RRB','arguments',3,'p_arguments','Parser.py',120),
  ('actual_parameter_list -> actual_parameter_list COMMA actual_parameter','actual_parameter_list',3,'p_actual_parameter_list','Parser.py',125),
  ('actual_parameter_list -> actual_parameter','actual_parameter_list',1,'p_actual_parameter_list','Parser.py',126),
  ('actual_parameter -> expression','actual_parameter',1,'p_actual_parameter','Parser.py',132),
  ('actual_parameter -> IDENTIFIER','actual_parameter',1,'p_actual_parameter','Parser.py',133),
  ('expression -> INTEGER_CONSTANT','expression',1,'p_expression','Parser.py',138),
  ('expression -> REAL_CONSTANT','expression',1,'p_expression','Parser.py',139),
  ('expression -> IDENTIFIER','expression',1,'p_expression','Parser.py',140),
  ('expression -> expression SUM expression','expression',3,'p_expression','Parser.py',141),
  ('expression -> expression SUB expression','expression',3,'p_expression','Parser.py',142),
  ('expression -> expression MUL expression','expression',3,'p_expression','Parser.py',143),
  ('expression -> expression DIV expression','expression',3,'p_expression','Parser.py',144),
  ('expression -> SUB expression','expression',2,'p_expression','Parser.py',145),
  ('expression -> expression DIV_KW expression','expression',3,'p_expression','Parser.py',146),
  ('expression -> expression MOD_KW expression','expression',3,'p_expression','Parser.py',147),
  ('expression -> expression LT expression','expression',3,'p_expression','Parser.py',148),
  ('expression -> expression LE expression','expression',3,'p_expression','Parser.py',149),
  ('expression -> expression EQ expression','expression',3,'p_expression','Parser.py',150),
  ('expression -> expression NE expression','expression',3,'p_expression','Parser.py',151),
  ('expression -> expression GT expression','expression',3,'p_expression','Parser.py',152),
  ('expression -> expression GE expression','expression',3,'p_expression','Parser.py',153),
  ('expression -> expression AND_KW expression','expression',3,'p_expression','Parser.py',154),
  ('expression -> expression OR_KW expression','expression',3,'p_expression','Parser.py',155),
  ('expression -> NOT_KW expression','expression',2,'p_expression','Parser.py',156),
  ('expression -> LRB expression RRB','expression',3,'p_expression','Parser.py',157),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',183),
]
