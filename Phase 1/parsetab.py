
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightPROCEDURE_KWFUNCTION_KWleftSEMICOLONleftIDENTIFIERleftTHEN_KWleftIF_KWELSE_KWrightASSIGNleftREAL_KWleftINTEGER_KWleftOR_KWleftAND_KWleftNOT_KWleftGTLTNEEQLEGEleftSUMSUBleftMULDIVDIV_KWMOD_KWleftLRBRRBleftERRORAND_KW ASSIGN BEGIN_KW COLON COMMA DIV DIV_KW DOT DO_KW ELSE_KW END_KW EQ ERROR FUNCTION_KW GE GT IDENTIFIER IF_KW INTEGER_CONSTANT INTEGER_KW LE LRB LT MOD_KW MUL NE NOT_KW OR_KW PROCEDURE_KW PROGRAM_KW REAL_CONSTANT REAL_KW RRB SEMICOLON SUB SUM THEN_KW VAR_KW WHILE_KWprogram : PROGRAM_KW IDENTIFIER declarations procedure_list compound_statement DOTdeclarations : VAR_KW declaration_list SEMICOLON\n                        | emptydeclaration_list : identifier_list COLON type\n               | declaration_list SEMICOLON identifier_list COLON typeidentifier_list : IDENTIFIER\n                | identifier_list COMMA IDENTIFIERtype : INTEGER_KW\n                | REAL_KWprocedure_list : procedure_list procedure\n                          | procedure_list function\n                          | emptyprocedure : PROCEDURE_KW IDENTIFIER parameters SEMICOLON declarations compound_statement SEMICOLONfunction : FUNCTION_KW IDENTIFIER parameters COLON type SEMICOLON declarations compound_statement SEMICOLONparameters : LRB declaration_list RRB\n                    | emptycompound_statement : BEGIN_KW statement_list END_KWstatement_list : statement\n                          | statement_list SEMICOLON statementstatement : IDENTIFIER ASSIGN expression\n                     | IF_KW expression THEN_KW statement ELSE_KW statement\n                     | IF_KW expression THEN_KW statement\n                     | WHILE_KW expression DO_KW statement\n                     | compound_statement\n                     | IDENTIFIER arguments\n                     | IDENTIFIER ASSIGN IDENTIFIER arguments\n                     | emptyarguments : LRB actual_parameter_list RRBactual_parameter_list : actual_parameter_list COMMA actual_parameter\n                                 | actual_parameteractual_parameter : expressionexpression : INTEGER_CONSTANT\n                      | REAL_CONSTANT\n                      | IDENTIFIER\n                      | expression SUM expression\n                      | expression SUB expression\n                      | expression MUL expression\n                      | expression DIV expression\n                      | SUB expression\n                      | expression DIV_KW expression\n                      | expression MOD_KW expression\n                      | expression LT expression\n                      | expression LE expression\n                      | expression EQ expression\n                      | expression NE expression\n                      | expression GT expression\n                      | expression GE expression\n                      | expression AND_KW expression\n                      | expression OR_KW expression\n                      | NOT_KW expression\n                      | LRB expression RRB\n                      empty :'
    
_lr_action_items = {'PROGRAM_KW':([0,],[2,]),'$end':([1,21,],[0,-1,]),'IDENTIFIER':([2,5,15,16,17,18,20,25,26,37,38,40,45,46,47,50,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,78,85,105,108,],[3,11,24,29,30,11,35,44,44,24,55,44,44,44,44,11,24,44,44,44,44,44,44,44,44,44,44,44,44,44,44,24,44,11,24,]),'VAR_KW':([3,79,110,],[5,5,5,]),'BEGIN_KW':([3,4,6,7,8,13,14,15,18,37,60,78,79,103,108,110,112,113,115,],[-52,-52,-3,15,-12,-10,-11,15,-2,15,15,15,-52,15,15,-52,-13,15,-14,]),'PROCEDURE_KW':([3,4,6,7,8,13,14,18,112,115,],[-52,-52,-3,16,-12,-10,-11,-2,-13,-14,]),'FUNCTION_KW':([3,4,6,7,8,13,14,18,112,115,],[-52,-52,-3,17,-12,-10,-11,-2,-13,-14,]),'SEMICOLON':([9,15,22,23,27,28,29,32,33,34,36,37,39,42,43,44,49,51,54,55,56,60,75,76,78,80,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,106,108,109,111,114,],[18,-52,37,-18,-24,-27,-52,-4,-8,-9,-17,-52,-25,-32,-33,-34,79,-16,-19,-34,-20,-52,-39,-50,-52,105,-5,-26,-28,-22,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,-23,-15,110,-52,112,-21,115,]),'COLON':([10,11,30,31,35,51,52,104,],[19,-6,-52,53,-7,-16,81,-15,]),'COMMA':([10,11,31,35,42,43,44,57,58,59,75,76,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,107,],[20,-6,20,-7,-32,-33,-34,85,-30,-31,-39,-50,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,-29,]),'DOT':([12,36,],[21,-17,]),'IF_KW':([15,37,60,78,108,],[25,25,25,25,25,]),'WHILE_KW':([15,37,60,78,108,],[26,26,26,26,26,]),'END_KW':([15,22,23,27,28,36,37,39,42,43,44,54,55,56,60,75,76,78,83,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,108,111,],[-52,36,-18,-24,-27,-17,-52,-25,-32,-33,-34,-19,-34,-20,-52,-39,-50,-52,-26,-28,-22,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,-23,-52,-21,]),'INTEGER_KW':([19,53,81,],[33,33,33,]),'REAL_KW':([19,53,81,],[34,34,34,]),'ASSIGN':([24,],[38,]),'LRB':([24,25,26,29,30,38,40,45,46,47,55,61,62,63,64,65,66,67,68,69,70,71,72,73,74,85,],[40,47,47,50,50,47,47,47,47,47,40,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'INTEGER_CONSTANT':([25,26,38,40,45,46,47,61,62,63,64,65,66,67,68,69,70,71,72,73,74,85,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'REAL_CONSTANT':([25,26,38,40,45,46,47,61,62,63,64,65,66,67,68,69,70,71,72,73,74,85,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'SUB':([25,26,38,40,41,42,43,44,45,46,47,48,55,56,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,],[45,45,45,45,62,-32,-33,-34,45,45,45,62,-34,62,62,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-39,62,62,45,-35,-36,-37,-38,-40,-41,62,62,62,62,62,62,62,62,-51,]),'NOT_KW':([25,26,38,40,45,46,47,61,62,63,64,65,66,67,68,69,70,71,72,73,74,85,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'ELSE_KW':([27,28,36,39,42,43,44,55,56,60,75,76,78,83,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,108,111,],[-24,-27,-17,-25,-32,-33,-34,-34,-20,-52,-39,-50,-52,-26,-28,108,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,-23,-52,-21,]),'RRB':([32,33,34,42,43,44,57,58,59,75,76,77,80,82,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,107,],[-4,-8,-9,-32,-33,-34,84,-30,-31,-39,-50,101,104,-5,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,-29,]),'THEN_KW':([41,42,43,44,75,76,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,],[60,-32,-33,-34,-39,-50,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,]),'SUM':([41,42,43,44,48,55,56,59,75,76,77,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,],[61,-32,-33,-34,61,-34,61,61,-39,61,61,-35,-36,-37,-38,-40,-41,61,61,61,61,61,61,61,61,-51,]),'MUL':([41,42,43,44,48,55,56,59,75,76,77,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,],[63,-32,-33,-34,63,-34,63,63,63,63,63,63,63,-37,-38,-40,-41,63,63,63,63,63,63,63,63,-51,]),'DIV':([41,42,43,44,48,55,56,59,75,76,77,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,],[64,-32,-33,-34,64,-34,64,64,64,64,64,64,64,-37,-38,-40,-41,64,64,64,64,64,64,64,64,-51,]),'DIV_KW':([41,42,43,44,48,55,56,59,75,76,77,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,],[65,-32,-33,-34,65,-34,65,65,65,65,65,65,65,-37,-38,-40,-41,65,65,65,65,65,65,65,65,-51,]),'MOD_KW':([41,42,43,44,48,55,56,59,75,76,77,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,],[66,-32,-33,-34,66,-34,66,66,66,66,66,66,66,-37,-38,-40,-41,66,66,66,66,66,66,66,66,-51,]),'LT':([41,42,43,44,48,55,56,59,75,76,77,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,],[67,-32,-33,-34,67,-34,67,67,-39,67,67,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,67,67,-51,]),'LE':([41,42,43,44,48,55,56,59,75,76,77,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,],[68,-32,-33,-34,68,-34,68,68,-39,68,68,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,68,68,-51,]),'EQ':([41,42,43,44,48,55,56,59,75,76,77,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,],[69,-32,-33,-34,69,-34,69,69,-39,69,69,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,69,69,-51,]),'NE':([41,42,43,44,48,55,56,59,75,76,77,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,],[70,-32,-33,-34,70,-34,70,70,-39,70,70,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,70,70,-51,]),'GT':([41,42,43,44,48,55,56,59,75,76,77,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,],[71,-32,-33,-34,71,-34,71,71,-39,71,71,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,71,71,-51,]),'GE':([41,42,43,44,48,55,56,59,75,76,77,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,],[72,-32,-33,-34,72,-34,72,72,-39,72,72,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,72,72,-51,]),'AND_KW':([41,42,43,44,48,55,56,59,75,76,77,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,],[73,-32,-33,-34,73,-34,73,73,-39,-50,73,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,-48,73,-51,]),'OR_KW':([41,42,43,44,48,55,56,59,75,76,77,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,],[74,-32,-33,-34,74,-34,74,74,-39,-50,74,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,]),'DO_KW':([42,43,44,48,75,76,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,],[-32,-33,-34,78,-39,-50,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([3,79,110,],[4,103,113,]),'empty':([3,4,15,29,30,37,60,78,79,108,110,],[6,8,28,51,51,28,28,28,6,28,6,]),'procedure_list':([4,],[7,]),'declaration_list':([5,50,],[9,80,]),'identifier_list':([5,18,50,105,],[10,31,10,31,]),'compound_statement':([7,15,37,60,78,103,108,113,],[12,27,27,27,27,109,27,114,]),'procedure':([7,],[13,]),'function':([7,],[14,]),'statement_list':([15,],[22,]),'statement':([15,37,60,78,108,],[23,54,86,102,111,]),'type':([19,53,81,],[32,82,106,]),'arguments':([24,55,],[39,83,]),'expression':([25,26,38,40,45,46,47,61,62,63,64,65,66,67,68,69,70,71,72,73,74,85,],[41,48,56,59,75,76,77,87,88,89,90,91,92,93,94,95,96,97,98,99,100,59,]),'parameters':([29,30,],[49,52,]),'actual_parameter_list':([40,],[57,]),'actual_parameter':([40,85,],[58,107,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM_KW IDENTIFIER declarations procedure_list compound_statement DOT','program',6,'p_program','Parser.py',38),
  ('declarations -> VAR_KW declaration_list SEMICOLON','declarations',3,'p_declarations','Parser.py',43),
  ('declarations -> empty','declarations',1,'p_declarations','Parser.py',44),
  ('declaration_list -> identifier_list COLON type','declaration_list',3,'p_declaration_list','Parser.py',56),
  ('declaration_list -> declaration_list SEMICOLON identifier_list COLON type','declaration_list',5,'p_declaration_list','Parser.py',57),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list','Parser.py',70),
  ('identifier_list -> identifier_list COMMA IDENTIFIER','identifier_list',3,'p_identifier_list','Parser.py',71),
  ('type -> INTEGER_KW','type',1,'p_type','Parser.py',83),
  ('type -> REAL_KW','type',1,'p_type','Parser.py',84),
  ('procedure_list -> procedure_list procedure','procedure_list',2,'p_procedure_list','Parser.py',96),
  ('procedure_list -> procedure_list function','procedure_list',2,'p_procedure_list','Parser.py',97),
  ('procedure_list -> empty','procedure_list',1,'p_procedure_list','Parser.py',98),
  ('procedure -> PROCEDURE_KW IDENTIFIER parameters SEMICOLON declarations compound_statement SEMICOLON','procedure',7,'p_procedure','Parser.py',112),
  ('function -> FUNCTION_KW IDENTIFIER parameters COLON type SEMICOLON declarations compound_statement SEMICOLON','function',9,'p_function','Parser.py',117),
  ('parameters -> LRB declaration_list RRB','parameters',3,'p_parameters','Parser.py',122),
  ('parameters -> empty','parameters',1,'p_parameters','Parser.py',123),
  ('compound_statement -> BEGIN_KW statement_list END_KW','compound_statement',3,'p_compound_statement','Parser.py',135),
  ('statement_list -> statement','statement_list',1,'p_statement_list','Parser.py',147),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_statement_list','Parser.py',148),
  ('statement -> IDENTIFIER ASSIGN expression','statement',3,'p_statement','Parser.py',161),
  ('statement -> IF_KW expression THEN_KW statement ELSE_KW statement','statement',6,'p_statement','Parser.py',162),
  ('statement -> IF_KW expression THEN_KW statement','statement',4,'p_statement','Parser.py',163),
  ('statement -> WHILE_KW expression DO_KW statement','statement',4,'p_statement','Parser.py',164),
  ('statement -> compound_statement','statement',1,'p_statement','Parser.py',165),
  ('statement -> IDENTIFIER arguments','statement',2,'p_statement','Parser.py',166),
  ('statement -> IDENTIFIER ASSIGN IDENTIFIER arguments','statement',4,'p_statement','Parser.py',167),
  ('statement -> empty','statement',1,'p_statement','Parser.py',168),
  ('arguments -> LRB actual_parameter_list RRB','arguments',3,'p_arguments','Parser.py',181),
  ('actual_parameter_list -> actual_parameter_list COMMA actual_parameter','actual_parameter_list',3,'p_actual_parameter_list','Parser.py',193),
  ('actual_parameter_list -> actual_parameter','actual_parameter_list',1,'p_actual_parameter_list','Parser.py',194),
  ('actual_parameter -> expression','actual_parameter',1,'p_actual_parameter','Parser.py',207),
  ('expression -> INTEGER_CONSTANT','expression',1,'p_expression','Parser.py',219),
  ('expression -> REAL_CONSTANT','expression',1,'p_expression','Parser.py',220),
  ('expression -> IDENTIFIER','expression',1,'p_expression','Parser.py',221),
  ('expression -> expression SUM expression','expression',3,'p_expression','Parser.py',222),
  ('expression -> expression SUB expression','expression',3,'p_expression','Parser.py',223),
  ('expression -> expression MUL expression','expression',3,'p_expression','Parser.py',224),
  ('expression -> expression DIV expression','expression',3,'p_expression','Parser.py',225),
  ('expression -> SUB expression','expression',2,'p_expression','Parser.py',226),
  ('expression -> expression DIV_KW expression','expression',3,'p_expression','Parser.py',227),
  ('expression -> expression MOD_KW expression','expression',3,'p_expression','Parser.py',228),
  ('expression -> expression LT expression','expression',3,'p_expression','Parser.py',229),
  ('expression -> expression LE expression','expression',3,'p_expression','Parser.py',230),
  ('expression -> expression EQ expression','expression',3,'p_expression','Parser.py',231),
  ('expression -> expression NE expression','expression',3,'p_expression','Parser.py',232),
  ('expression -> expression GT expression','expression',3,'p_expression','Parser.py',233),
  ('expression -> expression GE expression','expression',3,'p_expression','Parser.py',234),
  ('expression -> expression AND_KW expression','expression',3,'p_expression','Parser.py',235),
  ('expression -> expression OR_KW expression','expression',3,'p_expression','Parser.py',236),
  ('expression -> NOT_KW expression','expression',2,'p_expression','Parser.py',237),
  ('expression -> LRB expression RRB','expression',3,'p_expression','Parser.py',238),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',251),
]
