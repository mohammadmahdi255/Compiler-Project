
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightPROCEDURE_KWFUNCTION_KWleftSEMICOLONleftIDENTIFIERleftTHEN_KWleftIF_KWELSE_KWrightASSIGNleftREAL_KWleftINTEGER_KWleftOR_KWleftAND_KWleftNOT_KWleftGTLTNEEQLEGEleftSUMSUBleftMULDIVDIV_KWMOD_KWleftLRBRRBAND_KW ASSIGN BEGIN_KW COLON COMMA DIV DIV_KW DOT DO_KW ELSE_KW END_KW EQ ERROR FUNCTION_KW GE GT IDENTIFIER IF_KW INTEGER_CONSTANT INTEGER_KW LE LRB LT MOD_KW MUL NE NOT_KW OR_KW PROCEDURE_KW PROGRAM_KW REAL_CONSTANT REAL_KW RRB SEMICOLON SUB SUM THEN_KW VAR_KW WHILE_KWprogram : PROGRAM_KW IDENTIFIER declarations procedure_list compound_statement DOTdeclarations : VAR_KW declaration_list SEMICOLON\n                        | emptydeclaration_list : identifier_list COLON type\n               | declaration_list SEMICOLON identifier_list COLON typeidentifier_list : IDENTIFIER\n                | identifier_list COMMA IDENTIFIERtype : INTEGER_KW\n                | REAL_KWprocedure_list : procedure_list procedure\n                          | procedure_list function\n                          | emptyprocedure : PROCEDURE_KW IDENTIFIER parameters SEMICOLON declarations compound_statement SEMICOLONfunction : FUNCTION_KW IDENTIFIER parameters COLON type SEMICOLON declarations compound_statement SEMICOLONparameters : LRB declaration_list RRB\n                    | emptycompound_statement : BEGIN_KW statement_list END_KWstatement_list : statement\n                          | statement_list SEMICOLON statementstatement : IDENTIFIER ASSIGN expression\n                     | IF_KW expression THEN_KW statement ELSE_KW statement\n                     | IF_KW expression THEN_KW statement\n                     | WHILE_KW expression DO_KW statement\n                     | compound_statement\n                     | IDENTIFIER arguments\n                     | emptyarguments : LRB actual_parameter_list RRBactual_parameter_list : actual_parameter_list COMMA actual_parameter\n                                 | actual_parameteractual_parameter : expressionexpression : INTEGER_CONSTANT\n                      | REAL_CONSTANT\n                      | IDENTIFIER\n                      | expression SUM expression\n                      | expression SUB expression\n                      | expression MUL expression\n                      | expression DIV expression\n                      | SUB expression\n                      | expression DIV_KW expression\n                      | expression MOD_KW expression\n                      | expression LT expression\n                      | expression LE expression\n                      | expression EQ expression\n                      | expression NE expression\n                      | expression GT expression\n                      | expression GE expression\n                      | expression AND_KW expression\n                      | expression OR_KW expression\n                      | NOT_KW expression\n                      | LRB expression RRB\n                      empty :'
    
_lr_action_items = {'PROGRAM_KW':([0,],[2,]),'$end':([1,21,],[0,-1,]),'IDENTIFIER':([2,5,15,16,17,18,20,25,26,37,38,40,45,46,47,50,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,83,103,106,],[3,11,24,29,30,11,35,44,44,24,44,44,44,44,44,11,24,44,44,44,44,44,44,44,44,44,44,44,44,44,44,24,44,11,24,]),'VAR_KW':([3,78,108,],[5,5,5,]),'BEGIN_KW':([3,4,6,7,8,13,14,15,18,37,59,77,78,101,106,108,110,111,113,],[-51,-51,-3,15,-12,-10,-11,15,-2,15,15,15,-51,15,15,-51,-13,15,-14,]),'PROCEDURE_KW':([3,4,6,7,8,13,14,18,110,113,],[-51,-51,-3,16,-12,-10,-11,-2,-13,-14,]),'FUNCTION_KW':([3,4,6,7,8,13,14,18,110,113,],[-51,-51,-3,17,-12,-10,-11,-2,-13,-14,]),'SEMICOLON':([9,15,22,23,27,28,29,32,33,34,36,37,39,42,43,44,49,51,54,55,59,74,75,77,79,81,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,106,107,109,112,],[18,-51,37,-18,-24,-26,-51,-4,-8,-9,-17,-51,-25,-31,-32,-33,78,-16,-19,-20,-51,-38,-49,-51,103,-5,-27,-22,-34,-35,-36,-37,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-50,-23,-15,108,-51,110,-21,113,]),'COLON':([10,11,30,31,35,51,52,102,],[19,-6,-51,53,-7,-16,80,-15,]),'COMMA':([10,11,31,35,42,43,44,56,57,58,74,75,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,105,],[20,-6,20,-7,-31,-32,-33,83,-29,-30,-38,-49,-34,-35,-36,-37,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-50,-28,]),'DOT':([12,36,],[21,-17,]),'IF_KW':([15,37,59,77,106,],[25,25,25,25,25,]),'WHILE_KW':([15,37,59,77,106,],[26,26,26,26,26,]),'END_KW':([15,22,23,27,28,36,37,39,42,43,44,54,55,59,74,75,77,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,106,109,],[-51,36,-18,-24,-26,-17,-51,-25,-31,-32,-33,-19,-20,-51,-38,-49,-51,-27,-22,-34,-35,-36,-37,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-50,-23,-51,-21,]),'INTEGER_KW':([19,53,80,],[33,33,33,]),'REAL_KW':([19,53,80,],[34,34,34,]),'ASSIGN':([24,],[38,]),'LRB':([24,25,26,29,30,38,40,45,46,47,60,61,62,63,64,65,66,67,68,69,70,71,72,73,83,],[40,47,47,50,50,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'INTEGER_CONSTANT':([25,26,38,40,45,46,47,60,61,62,63,64,65,66,67,68,69,70,71,72,73,83,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'REAL_CONSTANT':([25,26,38,40,45,46,47,60,61,62,63,64,65,66,67,68,69,70,71,72,73,83,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'SUB':([25,26,38,40,41,42,43,44,45,46,47,48,55,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[45,45,45,45,61,-31,-32,-33,45,45,45,61,61,61,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-38,61,61,45,-34,-35,-36,-37,-39,-40,61,61,61,61,61,61,61,61,-50,]),'NOT_KW':([25,26,38,40,45,46,47,60,61,62,63,64,65,66,67,68,69,70,71,72,73,83,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'ELSE_KW':([27,28,36,39,42,43,44,55,59,74,75,77,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,106,109,],[-24,-26,-17,-25,-31,-32,-33,-20,-51,-38,-49,-51,-27,106,-34,-35,-36,-37,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-50,-23,-51,-21,]),'RRB':([32,33,34,42,43,44,56,57,58,74,75,76,79,81,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,105,],[-4,-8,-9,-31,-32,-33,82,-29,-30,-38,-49,99,102,-5,-34,-35,-36,-37,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-50,-28,]),'THEN_KW':([41,42,43,44,74,75,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[59,-31,-32,-33,-38,-49,-34,-35,-36,-37,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-50,]),'SUM':([41,42,43,44,48,55,58,74,75,76,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[60,-31,-32,-33,60,60,60,-38,60,60,-34,-35,-36,-37,-39,-40,60,60,60,60,60,60,60,60,-50,]),'MUL':([41,42,43,44,48,55,58,74,75,76,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[62,-31,-32,-33,62,62,62,62,62,62,62,62,-36,-37,-39,-40,62,62,62,62,62,62,62,62,-50,]),'DIV':([41,42,43,44,48,55,58,74,75,76,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[63,-31,-32,-33,63,63,63,63,63,63,63,63,-36,-37,-39,-40,63,63,63,63,63,63,63,63,-50,]),'DIV_KW':([41,42,43,44,48,55,58,74,75,76,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[64,-31,-32,-33,64,64,64,64,64,64,64,64,-36,-37,-39,-40,64,64,64,64,64,64,64,64,-50,]),'MOD_KW':([41,42,43,44,48,55,58,74,75,76,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[65,-31,-32,-33,65,65,65,65,65,65,65,65,-36,-37,-39,-40,65,65,65,65,65,65,65,65,-50,]),'LT':([41,42,43,44,48,55,58,74,75,76,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[66,-31,-32,-33,66,66,66,-38,66,66,-34,-35,-36,-37,-39,-40,-41,-42,-43,-44,-45,-46,66,66,-50,]),'LE':([41,42,43,44,48,55,58,74,75,76,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[67,-31,-32,-33,67,67,67,-38,67,67,-34,-35,-36,-37,-39,-40,-41,-42,-43,-44,-45,-46,67,67,-50,]),'EQ':([41,42,43,44,48,55,58,74,75,76,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[68,-31,-32,-33,68,68,68,-38,68,68,-34,-35,-36,-37,-39,-40,-41,-42,-43,-44,-45,-46,68,68,-50,]),'NE':([41,42,43,44,48,55,58,74,75,76,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[69,-31,-32,-33,69,69,69,-38,69,69,-34,-35,-36,-37,-39,-40,-41,-42,-43,-44,-45,-46,69,69,-50,]),'GT':([41,42,43,44,48,55,58,74,75,76,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[70,-31,-32,-33,70,70,70,-38,70,70,-34,-35,-36,-37,-39,-40,-41,-42,-43,-44,-45,-46,70,70,-50,]),'GE':([41,42,43,44,48,55,58,74,75,76,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[71,-31,-32,-33,71,71,71,-38,71,71,-34,-35,-36,-37,-39,-40,-41,-42,-43,-44,-45,-46,71,71,-50,]),'AND_KW':([41,42,43,44,48,55,58,74,75,76,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[72,-31,-32,-33,72,72,72,-38,-49,72,-34,-35,-36,-37,-39,-40,-41,-42,-43,-44,-45,-46,-47,72,-50,]),'OR_KW':([41,42,43,44,48,55,58,74,75,76,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[73,-31,-32,-33,73,73,73,-38,-49,73,-34,-35,-36,-37,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-50,]),'DO_KW':([42,43,44,48,74,75,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[-31,-32,-33,77,-38,-49,-34,-35,-36,-37,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-50,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([3,78,108,],[4,101,111,]),'empty':([3,4,15,29,30,37,59,77,78,106,108,],[6,8,28,51,51,28,28,28,6,28,6,]),'procedure_list':([4,],[7,]),'declaration_list':([5,50,],[9,79,]),'identifier_list':([5,18,50,103,],[10,31,10,31,]),'compound_statement':([7,15,37,59,77,101,106,111,],[12,27,27,27,27,107,27,112,]),'procedure':([7,],[13,]),'function':([7,],[14,]),'statement_list':([15,],[22,]),'statement':([15,37,59,77,106,],[23,54,84,100,109,]),'type':([19,53,80,],[32,81,104,]),'arguments':([24,],[39,]),'expression':([25,26,38,40,45,46,47,60,61,62,63,64,65,66,67,68,69,70,71,72,73,83,],[41,48,55,58,74,75,76,85,86,87,88,89,90,91,92,93,94,95,96,97,98,58,]),'parameters':([29,30,],[49,52,]),'actual_parameter_list':([40,],[56,]),'actual_parameter':([40,83,],[57,105,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM_KW IDENTIFIER declarations procedure_list compound_statement DOT','program',6,'p_program','Parser.py',36),
  ('declarations -> VAR_KW declaration_list SEMICOLON','declarations',3,'p_declarations','Parser.py',41),
  ('declarations -> empty','declarations',1,'p_declarations','Parser.py',42),
  ('declaration_list -> identifier_list COLON type','declaration_list',3,'p_declaration_list','Parser.py',54),
  ('declaration_list -> declaration_list SEMICOLON identifier_list COLON type','declaration_list',5,'p_declaration_list','Parser.py',55),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list','Parser.py',68),
  ('identifier_list -> identifier_list COMMA IDENTIFIER','identifier_list',3,'p_identifier_list','Parser.py',69),
  ('type -> INTEGER_KW','type',1,'p_type','Parser.py',81),
  ('type -> REAL_KW','type',1,'p_type','Parser.py',82),
  ('procedure_list -> procedure_list procedure','procedure_list',2,'p_procedure_list','Parser.py',94),
  ('procedure_list -> procedure_list function','procedure_list',2,'p_procedure_list','Parser.py',95),
  ('procedure_list -> empty','procedure_list',1,'p_procedure_list','Parser.py',96),
  ('procedure -> PROCEDURE_KW IDENTIFIER parameters SEMICOLON declarations compound_statement SEMICOLON','procedure',7,'p_procedure','Parser.py',110),
  ('function -> FUNCTION_KW IDENTIFIER parameters COLON type SEMICOLON declarations compound_statement SEMICOLON','function',9,'p_function','Parser.py',115),
  ('parameters -> LRB declaration_list RRB','parameters',3,'p_parameters','Parser.py',120),
  ('parameters -> empty','parameters',1,'p_parameters','Parser.py',121),
  ('compound_statement -> BEGIN_KW statement_list END_KW','compound_statement',3,'p_compound_statement','Parser.py',133),
  ('statement_list -> statement','statement_list',1,'p_statement_list','Parser.py',145),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_statement_list','Parser.py',146),
  ('statement -> IDENTIFIER ASSIGN expression','statement',3,'p_statement','Parser.py',159),
  ('statement -> IF_KW expression THEN_KW statement ELSE_KW statement','statement',6,'p_statement','Parser.py',160),
  ('statement -> IF_KW expression THEN_KW statement','statement',4,'p_statement','Parser.py',161),
  ('statement -> WHILE_KW expression DO_KW statement','statement',4,'p_statement','Parser.py',162),
  ('statement -> compound_statement','statement',1,'p_statement','Parser.py',163),
  ('statement -> IDENTIFIER arguments','statement',2,'p_statement','Parser.py',164),
  ('statement -> empty','statement',1,'p_statement','Parser.py',165),
  ('arguments -> LRB actual_parameter_list RRB','arguments',3,'p_arguments','Parser.py',178),
  ('actual_parameter_list -> actual_parameter_list COMMA actual_parameter','actual_parameter_list',3,'p_actual_parameter_list','Parser.py',190),
  ('actual_parameter_list -> actual_parameter','actual_parameter_list',1,'p_actual_parameter_list','Parser.py',191),
  ('actual_parameter -> expression','actual_parameter',1,'p_actual_parameter','Parser.py',204),
  ('expression -> INTEGER_CONSTANT','expression',1,'p_expression','Parser.py',216),
  ('expression -> REAL_CONSTANT','expression',1,'p_expression','Parser.py',217),
  ('expression -> IDENTIFIER','expression',1,'p_expression','Parser.py',218),
  ('expression -> expression SUM expression','expression',3,'p_expression','Parser.py',219),
  ('expression -> expression SUB expression','expression',3,'p_expression','Parser.py',220),
  ('expression -> expression MUL expression','expression',3,'p_expression','Parser.py',221),
  ('expression -> expression DIV expression','expression',3,'p_expression','Parser.py',222),
  ('expression -> SUB expression','expression',2,'p_expression','Parser.py',223),
  ('expression -> expression DIV_KW expression','expression',3,'p_expression','Parser.py',224),
  ('expression -> expression MOD_KW expression','expression',3,'p_expression','Parser.py',225),
  ('expression -> expression LT expression','expression',3,'p_expression','Parser.py',226),
  ('expression -> expression LE expression','expression',3,'p_expression','Parser.py',227),
  ('expression -> expression EQ expression','expression',3,'p_expression','Parser.py',228),
  ('expression -> expression NE expression','expression',3,'p_expression','Parser.py',229),
  ('expression -> expression GT expression','expression',3,'p_expression','Parser.py',230),
  ('expression -> expression GE expression','expression',3,'p_expression','Parser.py',231),
  ('expression -> expression AND_KW expression','expression',3,'p_expression','Parser.py',232),
  ('expression -> expression OR_KW expression','expression',3,'p_expression','Parser.py',233),
  ('expression -> NOT_KW expression','expression',2,'p_expression','Parser.py',234),
  ('expression -> LRB expression RRB','expression',3,'p_expression','Parser.py',235),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',248),
]
