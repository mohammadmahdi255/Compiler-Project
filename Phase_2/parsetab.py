
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightPROCEDURE_KWFUNCTION_KWleftSEMICOLONleftIDENTIFIERleftTHEN_KWleftIF_KWELSE_KWrightASSIGNleftREAL_KWleftINTEGER_KWleftOR_KWleftAND_KWleftNOT_KWleftGTLTNEEQLEGEleftSUMSUBleftMULDIVDIV_KWMOD_KWleftLRBRRBAND_KW ASSIGN BEGIN_KW COLON COMMA DIV DIV_KW DOT DO_KW ELSE_KW END_KW EQ ERROR FUNCTION_KW GE GT IDENTIFIER IF_KW INTEGER_CONSTANT INTEGER_KW LE LRB LT MOD_KW MUL NE NOT_KW OR_KW PROCEDURE_KW PROGRAM_KW REAL_CONSTANT REAL_KW RRB SEMICOLON SUB SUM THEN_KW VAR_KW WHILE_KWprogram : PROGRAM_KW IDENTIFIER declarations procedure_list compound_statement DOTdeclarations : VAR_KW declaration_list SEMICOLON\n                        | emptydeclaration_list : identifier_list COLON type\n                            | declaration_list SEMICOLON identifier_list COLON typeidentifier_list : IDENTIFIER\n                           | identifier_list COMMA IDENTIFIERtype : INTEGER_KW\n                | REAL_KWprocedure_list : procedure_list procedure\n                          | procedure_list function\n                          | emptyprocedure : PROCEDURE_KW IDENTIFIER parameters SEMICOLON declarations compound_statement SEMICOLONfunction : FUNCTION_KW IDENTIFIER parameters COLON type SEMICOLON declarations compound_statement SEMICOLONparameters : LRB declaration_list RRB\n                    | emptycompound_statement : BEGIN_KW statement_list END_KWstatement_list : statement\n                          | statement_list SEMICOLON empty statementstatement : IDENTIFIER ASSIGN expressionstatement : IF_KW expression THEN_KW empty statement empty_N ELSE_KW empty statementstatement : IF_KW expression THEN_KW empty statement empty_Nstatement : WHILE_KW empty expression DO_KW empty statementstatement : compound_statementstatement : IDENTIFIER arguments\n                     | emptyarguments : LRB actual_parameter_list RRBactual_parameter_list : actual_parameter_list COMMA actual_parameter\n                                 | actual_parameteractual_parameter : expressionexpression : INTEGER_CONSTANT\n                      | REAL_CONSTANTexpression : IDENTIFIERexpression : SUB expressionexpression : expression SUM expression\n                      | expression SUB expression\n                      | expression MUL expression\n                      | expression DIV expression\n                      | expression DIV_KW expression\n                      | expression MOD_KW expression\n                      | expression LT expression\n                      | expression LE expression\n                      | expression EQ expression\n                      | expression NE expression\n                      | expression GT expression\n                      | expression GE expression\n                      expression : expression AND_KW empty expression\n                      | expression OR_KW empty expression\n                      expression : NOT_KW expressionexpression : LRB expression RRBempty :empty_N :'
    
_lr_action_items = {'PROGRAM_KW':([0,],[2,]),'$end':([1,21,],[0,-1,]),'IDENTIFIER':([2,5,15,16,17,18,20,26,27,37,38,40,45,46,47,48,50,54,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,84,85,98,99,101,104,110,117,119,],[3,11,25,29,30,11,35,44,-51,-51,44,44,44,44,44,44,11,25,-51,44,44,44,44,44,44,44,44,44,44,44,44,-51,-51,44,25,44,44,-51,11,25,-51,25,]),'VAR_KW':([3,78,112,],[5,5,5,]),'BEGIN_KW':([3,4,6,7,8,13,14,15,18,37,54,59,78,85,101,102,110,112,115,116,117,119,120,],[-51,-51,-3,15,-12,-10,-11,15,-2,-51,15,-51,-51,15,-51,15,15,-51,-13,15,-51,15,-14,]),'PROCEDURE_KW':([3,4,6,7,8,13,14,18,115,120,],[-51,-51,-3,16,-12,-10,-11,-2,-13,-14,]),'FUNCTION_KW':([3,4,6,7,8,13,14,18,115,120,],[-51,-51,-3,17,-12,-10,-11,-2,-13,-14,]),'SEMICOLON':([9,15,22,23,24,28,29,32,33,34,36,37,39,42,43,44,49,51,54,55,59,74,75,79,81,82,83,85,86,87,88,89,90,91,92,93,94,95,96,97,100,101,103,105,107,108,109,110,111,113,114,117,118,119,121,],[18,-51,37,-18,-26,-24,-51,-4,-8,-9,-17,-51,-25,-31,-32,-33,78,-16,-51,-20,-51,-34,-49,104,-5,-19,-27,-51,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,-51,-15,112,-52,-47,-48,-51,115,-22,-23,-51,120,-51,-21,]),'COLON':([10,11,30,31,35,51,52,103,],[19,-6,-51,53,-7,-16,80,-15,]),'COMMA':([10,11,31,35,42,43,44,56,57,58,74,75,86,87,88,89,90,91,92,93,94,95,96,97,100,106,108,109,],[20,-6,20,-7,-31,-32,-33,84,-29,-30,-34,-49,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,-28,-47,-48,]),'DOT':([12,36,],[21,-17,]),'IF_KW':([15,37,54,59,85,101,110,117,119,],[26,-51,26,-51,26,-51,26,-51,26,]),'WHILE_KW':([15,37,54,59,85,101,110,117,119,],[27,-51,27,-51,27,-51,27,-51,27,]),'END_KW':([15,22,23,24,28,36,37,39,42,43,44,54,55,59,74,75,82,83,85,86,87,88,89,90,91,92,93,94,95,96,97,100,101,107,108,109,110,113,114,117,119,121,],[-51,36,-18,-26,-24,-17,-51,-25,-31,-32,-33,-51,-20,-51,-34,-49,-19,-27,-51,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,-51,-52,-47,-48,-51,-22,-23,-51,-51,-21,]),'INTEGER_KW':([19,53,80,],[33,33,33,]),'REAL_KW':([19,53,80,],[34,34,34,]),'ELSE_KW':([24,28,36,39,42,43,44,55,59,74,75,83,85,86,87,88,89,90,91,92,93,94,95,96,97,100,101,107,108,109,110,113,114,117,119,121,],[-26,-24,-17,-25,-31,-32,-33,-20,-51,-34,-49,-27,-51,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,-51,-52,-47,-48,-51,117,-23,-51,-51,-21,]),'ASSIGN':([25,],[38,]),'LRB':([25,26,27,29,30,38,40,45,46,47,48,60,61,62,63,64,65,66,67,68,69,70,71,72,73,84,98,99,],[40,47,-51,50,50,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-51,-51,47,47,47,]),'INTEGER_CONSTANT':([26,27,38,40,45,46,47,48,60,61,62,63,64,65,66,67,68,69,70,71,72,73,84,98,99,],[42,-51,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-51,-51,42,42,42,]),'REAL_CONSTANT':([26,27,38,40,45,46,47,48,60,61,62,63,64,65,66,67,68,69,70,71,72,73,84,98,99,],[43,-51,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-51,-51,43,43,43,]),'SUB':([26,27,38,40,41,42,43,44,45,46,47,48,55,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,108,109,],[45,-51,45,45,61,-31,-32,-33,45,45,45,45,61,61,45,45,45,45,45,45,45,45,45,45,45,45,-51,-51,-34,61,61,61,45,-35,-36,-37,-38,-39,-40,61,61,61,61,61,61,45,45,-50,61,61,]),'NOT_KW':([26,27,38,40,45,46,47,48,60,61,62,63,64,65,66,67,68,69,70,71,72,73,84,98,99,],[46,-51,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-51,-51,46,46,46,]),'RRB':([32,33,34,42,43,44,56,57,58,74,75,76,79,81,86,87,88,89,90,91,92,93,94,95,96,97,100,106,108,109,],[-4,-8,-9,-31,-32,-33,83,-29,-30,-34,-49,100,103,-5,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,-28,-47,-48,]),'THEN_KW':([41,42,43,44,74,75,86,87,88,89,90,91,92,93,94,95,96,97,100,108,109,],[59,-31,-32,-33,-34,-49,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,-47,-48,]),'SUM':([41,42,43,44,55,58,74,75,76,77,86,87,88,89,90,91,92,93,94,95,96,97,100,108,109,],[60,-31,-32,-33,60,60,-34,60,60,60,-35,-36,-37,-38,-39,-40,60,60,60,60,60,60,-50,60,60,]),'MUL':([41,42,43,44,55,58,74,75,76,77,86,87,88,89,90,91,92,93,94,95,96,97,100,108,109,],[62,-31,-32,-33,62,62,62,62,62,62,62,62,-37,-38,-39,-40,62,62,62,62,62,62,-50,62,62,]),'DIV':([41,42,43,44,55,58,74,75,76,77,86,87,88,89,90,91,92,93,94,95,96,97,100,108,109,],[63,-31,-32,-33,63,63,63,63,63,63,63,63,-37,-38,-39,-40,63,63,63,63,63,63,-50,63,63,]),'DIV_KW':([41,42,43,44,55,58,74,75,76,77,86,87,88,89,90,91,92,93,94,95,96,97,100,108,109,],[64,-31,-32,-33,64,64,64,64,64,64,64,64,-37,-38,-39,-40,64,64,64,64,64,64,-50,64,64,]),'MOD_KW':([41,42,43,44,55,58,74,75,76,77,86,87,88,89,90,91,92,93,94,95,96,97,100,108,109,],[65,-31,-32,-33,65,65,65,65,65,65,65,65,-37,-38,-39,-40,65,65,65,65,65,65,-50,65,65,]),'LT':([41,42,43,44,55,58,74,75,76,77,86,87,88,89,90,91,92,93,94,95,96,97,100,108,109,],[66,-31,-32,-33,66,66,-34,66,66,66,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,66,66,]),'LE':([41,42,43,44,55,58,74,75,76,77,86,87,88,89,90,91,92,93,94,95,96,97,100,108,109,],[67,-31,-32,-33,67,67,-34,67,67,67,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,67,67,]),'EQ':([41,42,43,44,55,58,74,75,76,77,86,87,88,89,90,91,92,93,94,95,96,97,100,108,109,],[68,-31,-32,-33,68,68,-34,68,68,68,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,68,68,]),'NE':([41,42,43,44,55,58,74,75,76,77,86,87,88,89,90,91,92,93,94,95,96,97,100,108,109,],[69,-31,-32,-33,69,69,-34,69,69,69,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,69,69,]),'GT':([41,42,43,44,55,58,74,75,76,77,86,87,88,89,90,91,92,93,94,95,96,97,100,108,109,],[70,-31,-32,-33,70,70,-34,70,70,70,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,70,70,]),'GE':([41,42,43,44,55,58,74,75,76,77,86,87,88,89,90,91,92,93,94,95,96,97,100,108,109,],[71,-31,-32,-33,71,71,-34,71,71,71,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,71,71,]),'AND_KW':([41,42,43,44,55,58,74,75,76,77,86,87,88,89,90,91,92,93,94,95,96,97,100,108,109,],[72,-31,-32,-33,72,72,-34,-49,72,72,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,-47,72,]),'OR_KW':([41,42,43,44,55,58,74,75,76,77,86,87,88,89,90,91,92,93,94,95,96,97,100,108,109,],[73,-31,-32,-33,73,73,-34,-49,73,73,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,-47,-48,]),'DO_KW':([42,43,44,74,75,77,86,87,88,89,90,91,92,93,94,95,96,97,100,108,109,],[-31,-32,-33,-34,-49,101,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,-47,-48,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([3,78,112,],[4,102,116,]),'empty':([3,4,15,27,29,30,37,54,59,72,73,78,85,101,110,112,117,119,],[6,8,24,48,51,51,54,24,85,98,99,6,24,110,24,6,119,24,]),'procedure_list':([4,],[7,]),'declaration_list':([5,50,],[9,79,]),'identifier_list':([5,18,50,104,],[10,31,10,31,]),'compound_statement':([7,15,54,85,102,110,116,119,],[12,28,28,28,111,28,118,28,]),'procedure':([7,],[13,]),'function':([7,],[14,]),'statement_list':([15,],[22,]),'statement':([15,54,85,110,119,],[23,82,107,114,121,]),'type':([19,53,80,],[32,81,105,]),'arguments':([25,],[39,]),'expression':([26,38,40,45,46,47,48,60,61,62,63,64,65,66,67,68,69,70,71,84,98,99,],[41,55,58,74,75,76,77,86,87,88,89,90,91,92,93,94,95,96,97,58,108,109,]),'parameters':([29,30,],[49,52,]),'actual_parameter_list':([40,],[56,]),'actual_parameter':([40,84,],[57,106,]),'empty_N':([107,],[113,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM_KW IDENTIFIER declarations procedure_list compound_statement DOT','program',6,'p_program','parser.py',38),
  ('declarations -> VAR_KW declaration_list SEMICOLON','declarations',3,'p_declarations','parser.py',43),
  ('declarations -> empty','declarations',1,'p_declarations','parser.py',44),
  ('declaration_list -> identifier_list COLON type','declaration_list',3,'p_declaration_list','parser.py',49),
  ('declaration_list -> declaration_list SEMICOLON identifier_list COLON type','declaration_list',5,'p_declaration_list','parser.py',50),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list','parser.py',55),
  ('identifier_list -> identifier_list COMMA IDENTIFIER','identifier_list',3,'p_identifier_list','parser.py',56),
  ('type -> INTEGER_KW','type',1,'p_type','parser.py',61),
  ('type -> REAL_KW','type',1,'p_type','parser.py',62),
  ('procedure_list -> procedure_list procedure','procedure_list',2,'p_procedure_list','parser.py',67),
  ('procedure_list -> procedure_list function','procedure_list',2,'p_procedure_list','parser.py',68),
  ('procedure_list -> empty','procedure_list',1,'p_procedure_list','parser.py',69),
  ('procedure -> PROCEDURE_KW IDENTIFIER parameters SEMICOLON declarations compound_statement SEMICOLON','procedure',7,'p_procedure','parser.py',74),
  ('function -> FUNCTION_KW IDENTIFIER parameters COLON type SEMICOLON declarations compound_statement SEMICOLON','function',9,'p_function','parser.py',79),
  ('parameters -> LRB declaration_list RRB','parameters',3,'p_parameters','parser.py',84),
  ('parameters -> empty','parameters',1,'p_parameters','parser.py',85),
  ('compound_statement -> BEGIN_KW statement_list END_KW','compound_statement',3,'p_compound_statement','parser.py',90),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',96),
  ('statement_list -> statement_list SEMICOLON empty statement','statement_list',4,'p_statement_list','parser.py',97),
  ('statement -> IDENTIFIER ASSIGN expression','statement',3,'p_statement_assign','parser.py',102),
  ('statement -> IF_KW expression THEN_KW empty statement empty_N ELSE_KW empty statement','statement',9,'p_statement_if_else','parser.py',116),
  ('statement -> IF_KW expression THEN_KW empty statement empty_N','statement',6,'p_statement_if','parser.py',139),
  ('statement -> WHILE_KW empty expression DO_KW empty statement','statement',6,'p_statement_while','parser.py',156),
  ('statement -> compound_statement','statement',1,'p_statement_compound','parser.py',175),
  ('statement -> IDENTIFIER arguments','statement',2,'p_statement','parser.py',181),
  ('statement -> empty','statement',1,'p_statement','parser.py',182),
  ('arguments -> LRB actual_parameter_list RRB','arguments',3,'p_arguments','parser.py',187),
  ('actual_parameter_list -> actual_parameter_list COMMA actual_parameter','actual_parameter_list',3,'p_actual_parameter_list','parser.py',192),
  ('actual_parameter_list -> actual_parameter','actual_parameter_list',1,'p_actual_parameter_list','parser.py',193),
  ('actual_parameter -> expression','actual_parameter',1,'p_actual_parameter','parser.py',198),
  ('expression -> INTEGER_CONSTANT','expression',1,'p_expression_assign_constant','parser.py',203),
  ('expression -> REAL_CONSTANT','expression',1,'p_expression_assign_constant','parser.py',204),
  ('expression -> IDENTIFIER','expression',1,'p_expression_assign_identifier','parser.py',210),
  ('expression -> SUB expression','expression',2,'p_expression_uminus','parser.py',216),
  ('expression -> expression SUM expression','expression',3,'p_expression_op','parser.py',225),
  ('expression -> expression SUB expression','expression',3,'p_expression_op','parser.py',226),
  ('expression -> expression MUL expression','expression',3,'p_expression_op','parser.py',227),
  ('expression -> expression DIV expression','expression',3,'p_expression_op','parser.py',228),
  ('expression -> expression DIV_KW expression','expression',3,'p_expression_op','parser.py',229),
  ('expression -> expression MOD_KW expression','expression',3,'p_expression_op','parser.py',230),
  ('expression -> expression LT expression','expression',3,'p_expression_op','parser.py',231),
  ('expression -> expression LE expression','expression',3,'p_expression_op','parser.py',232),
  ('expression -> expression EQ expression','expression',3,'p_expression_op','parser.py',233),
  ('expression -> expression NE expression','expression',3,'p_expression_op','parser.py',234),
  ('expression -> expression GT expression','expression',3,'p_expression_op','parser.py',235),
  ('expression -> expression GE expression','expression',3,'p_expression_op','parser.py',236),
  ('expression -> expression AND_KW empty expression','expression',4,'p_expression_bool','parser.py',266),
  ('expression -> expression OR_KW empty expression','expression',4,'p_expression_bool','parser.py',267),
  ('expression -> NOT_KW expression','expression',2,'p_expression_not','parser.py',290),
  ('expression -> LRB expression RRB','expression',3,'p_expression','parser.py',303),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',319),
  ('empty_N -> <empty>','empty_N',0,'p_empty_N','parser.py',325),
]
